package be.bewire.quiz.repository.entity;

import be.bewire.quiz.model.Difficulty;
import be.bewire.quiz.model.TypeQuiz;
import com.amazonaws.services.dynamodbv2.datamodeling.*;
import lombok.*;
import org.springframework.data.domain.AbstractAggregateRoot;

import javax.persistence.Column;
import javax.validation.constraints.Max;
import javax.validation.constraints.Min;
import javax.validation.constraints.NotBlank;
import javax.validation.constraints.Size;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.List;

@DynamoDBTable(tableName = "Quiz")
@NoArgsConstructor()
public class QuizEntity extends AbstractAggregateRoot<QuizEntity> {

    private String id;
    // @NotBlank(message = "Beginning time is required")
    // private LocalDate beginning;
    // @NotBlank(message = "Ending time is required")
    // private LocalDate ending;

    // @NotBlank(message = "Type is required")
    //private TypeQuiz type;
    @NotBlank(message = "Theme is required")

    private String theme;
    // @NotBlank(message = "Difficulty is required")
    // private Difficulty difficulty;

    @NotBlank(message = "Title is required")
    @Size(min = 1, max = 200)
    private String title;
    @Column(length = 1000)
    private String quizImage;

    //private List<Question> questions;

    public void addQuestion(Question question) {
/*
        questions.add(question);
        registerEvent(new QuestionAddedEvent(question, this));

 */
    }

    @DynamoDBAttribute

    public String getTheme() {
        return theme;
    }

    @DynamoDBAttribute
    public String getTitle() {
        return title;
    }

    @DynamoDBAttribute
    public String getQuizImage() {
        return quizImage;
    }

    public void setQuizImage(String quizImage) {
        this.quizImage = quizImage;
    }

    public void deleteQuestion(String questionId) {
        /*
        questions.removeIf(questionEntity -> questionEntity.getId().equals(questionId));
        registerEvent(new QuestionDeletedEvent(questionId, this));

         */
    }

    public void updateQuestion(String questionId, Question question) {
         /*
        questions.removeIf(q
        questions.removeIf(questionEntity -> questionEntity.getId().equals(questionId));

        questions.add(question);
        registerEvent(new QuestionUpdatedEvent(question, this));

          */
    }

    @AllArgsConstructor
    @Data
    public static class QuestionDeletedEvent {
        private final String questionId;
        private final QuizEntity quiz;
    }

    @AllArgsConstructor
    @Data
    public class QuestionUpdatedEvent {
        private final Question question;
        private final QuizEntity quiz;
    }


    @AllArgsConstructor
    @Data
    public class QuestionAddedEvent {
        private final Question question;
        private final QuizEntity quiz;
    }


    @DynamoDBHashKey
    @DynamoDBAutoGeneratedKey
    public String getId() {
        return id;
    }

    public void recalculateDifficulty() {
         /*
        if (questions.size() == 0) {
             this.difficulty = Difficulty.EASY;
            return;
        }
        long easyOccurences = this.questions.stream().filter(q -> q.getDifficulty().equals(Difficulty.EASY)).count();
        double mediumOccurences = (this.questions.stream().filter(q -> q.getDifficulty().equals(Difficulty.MEDIUM)).count()) * 2;
        long hardOccurences = (this.questions.stream().filter(q -> q.getDifficulty().equals(Difficulty.HARD)).count()) * 3;

        double calculatedDifficulty = (easyOccurences + mediumOccurences + hardOccurences) / questions.size();

        if (calculatedDifficulty < 1.75) {
              this.difficulty = Difficulty.EASY;
        } else if (calculatedDifficulty < 2.25) {
              this.difficulty = Difficulty.MEDIUM;
        } else {
              this.difficulty = Difficulty.HARD;
        }

          */
    }

    @NoArgsConstructor
    @Getter(onMethod = @__(@DynamoDBAttribute), value = AccessLevel.PUBLIC)
    @DynamoDBDocument
    public class Question {

        String id;

        @NotBlank(message = "Question is required")
        @Size(min = 1, max = 300)
        private String question;

        @NotBlank(message = "Difficulty is required")
        @DynamoDBTypeConvertedEnum
        private Difficulty difficulty;

        @NotBlank(message = "Time is required")
        @Min(1)
        @Max(30)
        private int timePerQuestion;

        private List<Question.Answer> answers = new ArrayList<>();

        @NoArgsConstructor
        @Getter(onMethod = @__(@DynamoDBAttribute), value = AccessLevel.PUBLIC)
        @DynamoDBDocument
        private class Answer {

            private String id;

            @NotBlank(message = "Corectness is required")
            private boolean correct;

            @NotBlank(message = "Answer is required")
            @Size(min = 1, max = 100)
            private String answer;
        }
    }
}
